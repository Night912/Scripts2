--[[
    Aimlock GUI Script for Roblox with Mobile Support
    Features:
    - Toggle Aimlock with GUI button
    - Adjustable smoothness for aim (works on mobile)
    - Targets enemy head
    - Team check to avoid targeting teammates
    - Visual indicator when target is locked
]]

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Local player
local localPlayer = Players.LocalPlayer
local localCharacter = localPlayer.Character or localPlayer.CharacterAdded:Wait()
localPlayer.CharacterAdded:Connect(function(character)
    localCharacter = character
end)

-- GUI Creation
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "AimlockGUI"
ScreenGui.Parent = game:GetService("CoreGui")

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 220, 0, 150)
Frame.Position = UDim2.new(0.5, -110, 0.5, -75)
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Frame.BorderSizePixel = 0
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 30)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Title.Text = "Aimlock GUI"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.SourceSansBold
Title.TextSize = 18
Title.Parent = Frame

local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0.8, 0, 0, 30)
ToggleButton.Position = UDim2.new(0.1, 0, 0.3, 0)
ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
ToggleButton.Text = "Aimlock: OFF"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Font = Enum.Font.SourceSans
ToggleButton.TextSize = 16
ToggleButton.Parent = Frame

-- Smoothness slider
local SmoothnessLabel = Instance.new("TextLabel")
SmoothnessLabel.Size = UDim2.new(0.8, 0, 0, 20)
SmoothnessLabel.Position = UDim2.new(0.1, 0, 0.6, 0)
SmoothnessLabel.BackgroundTransparency = 1
SmoothnessLabel.Text = "Smoothness: 50%"
SmoothnessLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
SmoothnessLabel.Font = Enum.Font.SourceSans
SmoothnessLabel.TextSize = 14
SmoothnessLabel.TextXAlignment = Enum.TextXAlignment.Left
SmoothnessLabel.Parent = Frame

local SmoothnessSlider = Instance.new("Frame")
SmoothnessSlider.Size = UDim2.new(0.8, 0, 0, 10)
SmoothnessSlider.Position = UDim2.new(0.1, 0, 0.75, 0)
SmoothnessSlider.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
SmoothnessSlider.BorderSizePixel = 0
SmoothnessSlider.Parent = Frame

local SmoothnessFill = Instance.new("Frame")
SmoothnessFill.Size = UDim2.new(0.5, 0, 1, 0)
SmoothnessFill.Position = UDim2.new(0, 0, 0, 0)
SmoothnessFill.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
SmoothnessFill.BorderSizePixel = 0
SmoothnessFill.Parent = SmoothnessSlider

local SliderButton = Instance.new("TextButton")
SliderButton.Size = UDim2.new(0, 20, 0, 20) -- Увеличено для мобильных устройств
SliderButton.Position = UDim2.new(0.5, -10, 0, -5)
SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SliderButton.Text = ""
SliderButton.ZIndex = 2
SliderButton.Parent = SmoothnessSlider

local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(0.8, 0, 0, 20)
StatusLabel.Position = UDim2.new(0.1, 0, 0.85, 0)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Status: Inactive"
StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
StatusLabel.Font = Enum.Font.SourceSans
StatusLabel.TextSize = 14
StatusLabel.Parent = Frame

-- Aimlock variables
local aimlockEnabled = false
local currentTarget = nil
local targetLocked = false
local smoothness = 0.5 -- Default smoothness (50%)
local sliderDragging = false

-- Team check function
local function isEnemy(player)
    if not player or not player.Team then return true end -- If no team system, assume enemy
    
    -- Check if player is on the same team
    if localPlayer.Team and player.Team == localPlayer.Team then
        return false
    end
    
    return true
end

-- Find closest enemy to crosshair
local function findClosestEnemy()
    local closestPlayer = nil
    local closestAngle = math.rad(10) -- 10 degree field of view
    
    if not localCharacter then return nil end
    local humanoidRootPart = localCharacter:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then return nil end
    
    local camera = workspace.CurrentCamera
    local cameraPosition = camera.CFrame.Position
    local cameraDirection = camera.CFrame.LookVector
    
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and isEnemy(player) then
            local character = player.Character
            if character then
                local head = character:FindFirstChild("Head")
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                
                if head and humanoid and humanoid.Health > 0 then
                    local directionToHead = (head.Position - cameraPosition).Unit
                    local angle = math.acos(cameraDirection:Dot(directionToHead))
                    
                    if angle < closestAngle then
                        closestAngle = angle
                        closestPlayer = player
                    end
                end
            end
        end
    end
    
    return closestPlayer
end

-- Smooth aim function with adjustable smoothness
local function smoothAim(targetPosition, currentCFrame, smoothFactor)
    local direction = (targetPosition - currentCFrame.Position).Unit
    local newLookVector = currentCFrame.LookVector:Lerp(direction, smoothFactor)
    return CFrame.new(currentCFrame.Position, currentCFrame.Position + newLookVector)
end

-- Aimlock function
local function aimlock()
    if not aimlockEnabled or not localCharacter then 
        targetLocked = false
        return 
    end
    
    local humanoid = localCharacter:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then 
        targetLocked = false
        return 
    end
    
    -- Find target if we don't have one
    if not currentTarget or not currentTarget.Character or not currentTarget.Character:FindFirstChild("Head") then
        currentTarget = findClosestEnemy()
        targetLocked = false
    end
    
    -- If we have a valid target
    if currentTarget and currentTarget.Character then
        local targetCharacter = currentTarget.Character
        local targetHead = targetCharacter:FindFirstChild("Head")
        local targetHumanoid = targetCharacter:FindFirstChildOfClass("Humanoid")
        
        if targetHead and targetHumanoid and targetHumanoid.Health > 0 then
            local camera = workspace.CurrentCamera
            if camera then
                -- Use smooth aim function with current smoothness value
                local newCFrame = smoothAim(targetHead.Position, camera.CFrame, smoothness)
                camera.CFrame = newCFrame
                targetLocked = true
                return
            end
        else
            currentTarget = nil
        end
    end
    
    targetLocked = false
end

-- Toggle aimlock
ToggleButton.MouseButton1Click:Connect(function()
    aimlockEnabled = not aimlockEnabled
    if aimlockEnabled then
        ToggleButton.Text = "Aimlock: ON"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
    else
        ToggleButton.Text = "Aimlock: OFF"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        currentTarget = nil
        targetLocked = false
    end
end)

-- Smoothness slider functionality
local function updateSmoothness(value)
    -- Clamp value between 0.1 and 0.9 (10% to 90%)
    smoothness = math.clamp(value, 0.1, 0.9)
    local percentage = math.floor(smoothness * 100)
    SmoothnessLabel.Text = "Smoothness: " .. percentage .. "%"
    SmoothnessFill.Size = UDim2.new(smoothness, 0, 1, 0)
    SliderButton.Position = UDim2.new(smoothness, -10, 0, -5)
end

-- Mobile touch support
local function getMobileInputPosition(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        return input.Position
    else
        return Vector2.new(input.Position.X, input.Position.Y)
    end
end

-- Slider drag logic (works for both mouse and touch)
SliderButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        sliderDragging = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        sliderDragging = false
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if sliderDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                          input.UserInputType == Enum.UserInputType.Touch) then
        local sliderAbsolutePosition = SmoothnessSlider.AbsolutePosition
        local sliderAbsoluteSize = SmoothnessSlider.AbsoluteSize
        local inputPos = getMobileInputPosition(input)
        local mouseX = inputPos.X
        
        -- Calculate relative position (0 to 1)
        local relativeX = (mouseX - sliderAbsolutePosition.X) / sliderAbsoluteSize.X
        updateSmoothness(relativeX)
    end
end)

-- Initialize smoothness
updateSmoothness(0.5)

-- Update status
RunService.Heartbeat:Connect(function()
    if aimlockEnabled then
        if targetLocked and currentTarget then
            StatusLabel.Text = "Status: Locked ("..currentTarget.Name..")"
            StatusLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
        else
            StatusLabel.Text = "Status: Searching..."
            StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 50)
        end
    else
        StatusLabel.Text = "Status: Inactive"
        StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    end
end)

-- Main loop
RunService.RenderStepped:Connect(aimlock)

-- Cleanup when GUI is closed
ScreenGui.Destroying:Connect(function()
    aimlockEnabled = false
end)
